<?php
/**
 * OrderItemApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: v0.1.41-7-gcca08cf
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * OrderItemApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderItemApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiOrderItemsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiOrderItemsShipmentItemsGetSubresource($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiOrderItemsShipmentItemsGetSubresourceWithHttpInfo($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiOrderItemsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrderItemsShipmentItemsGetSubresourceWithHttpInfo($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiOrderItemsShipmentItemsGetSubresourceRequest($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrderItemsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrderItemsShipmentItemsGetSubresourceAsync($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiOrderItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrderItemsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrderItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiOrderItemsShipmentItemsGetSubresourceRequest($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrderItemsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiOrderItemsShipmentItemsGetSubresourceRequest($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOrderItemsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/order_items/{id}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function apiOrdersItemsGetSubresource($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        list($response) = $this->apiOrdersItemsGetSubresourceWithHttpInfo($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);
        return $response;
    }

    /**
     * Operation apiOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersItemsGetSubresourceWithHttpInfo($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $request = $this->apiOrdersItemsGetSubresourceRequest($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsGetSubresourceAsync($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        return $this->apiOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->apiOrdersItemsGetSubresourceRequest($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiOrdersItemsGetSubresourceRequest($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/orders/{id}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersItemsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string $items items (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiOrdersItemsShipmentItemsGetSubresource($id, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiOrdersItemsShipmentItemsGetSubresourceWithHttpInfo($id, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiOrdersItemsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersItemsShipmentItemsGetSubresourceWithHttpInfo($id, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiOrdersItemsShipmentItemsGetSubresourceRequest($id, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersItemsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsShipmentItemsGetSubresourceAsync($id, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiOrdersItemsShipmentItemsGetSubresourceRequest($id, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersItemsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiOrdersItemsShipmentItemsGetSubresourceRequest($id, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOrdersItemsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'items' is set
        if ($items === null || (is_array($items) && count($items) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items when calling apiOrdersItemsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/orders/{id}/items/{items}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($items !== null) {
            $resourcePath = str_replace(
                '{' . 'items' . '}',
                ObjectSerializer::toPathValue($items),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orders orders (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresource($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceAsync($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        return $this->apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders/{orders}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orders orders (required)
     * @param  string $items items (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource($id, $workspaces, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceRequest($id, $workspaces, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceAsync($id, $workspaces, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceRequest($id, $workspaces, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresourceRequest($id, $workspaces, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'items' is set
        if ($items === null || (is_array($items) && count($items) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items when calling apiTeamsWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders/{orders}/items/{items}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }
        // path params
        if ($items !== null) {
            $resourcePath = str_replace(
                '{' . 'items' . '}',
                ObjectSerializer::toPathValue($items),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string $orders orders (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function apiWorkspacesOrdersItemsGetSubresource($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        list($response) = $this->apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $request = $this->apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsGetSubresourceAsync($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        return $this->apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiWorkspacesOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders/{orders}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersItemsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string $orders orders (required)
     * @param  string $items items (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiWorkspacesOrdersItemsShipmentItemsGetSubresource($id, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiWorkspacesOrdersItemsShipmentItemsGetSubresourceWithHttpInfo($id, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersItemsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersItemsShipmentItemsGetSubresourceWithHttpInfo($id, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiWorkspacesOrdersItemsShipmentItemsGetSubresourceRequest($id, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersItemsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsShipmentItemsGetSubresourceAsync($id, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiWorkspacesOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiWorkspacesOrdersItemsShipmentItemsGetSubresourceRequest($id, $orders, $items, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersItemsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string $items (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersItemsShipmentItemsGetSubresourceRequest($id, $orders, $items, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'items' is set
        if ($items === null || (is_array($items) && count($items) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items when calling apiWorkspacesOrdersItemsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders/{orders}/items/{items}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }
        // path params
        if ($items !== null) {
            $resourcePath = str_replace(
                '{' . 'items' . '}',
                ObjectSerializer::toPathValue($items),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrderItemItem
     *
     * Removes the OrderItem resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrderItemItem($id)
    {
        $this->deleteOrderItemItemWithHttpInfo($id);
    }

    /**
     * Operation deleteOrderItemItemWithHttpInfo
     *
     * Removes the OrderItem resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderItemItemWithHttpInfo($id)
    {
        $request = $this->deleteOrderItemItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrderItemItemAsync
     *
     * Removes the OrderItem resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemItemAsync($id)
    {
        return $this->deleteOrderItemItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrderItemItemAsyncWithHttpInfo
     *
     * Removes the OrderItem resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOrderItemItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrderItemItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrderItemItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOrderItemItem'
            );
        }

        $resourcePath = '/order_items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderItemCollection
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function getOrderItemCollection($id = null, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getOrderItemCollectionWithHttpInfo($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getOrderItemCollectionWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderItemCollectionWithHttpInfo($id = null, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getOrderItemCollectionRequest($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderItemCollectionAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemCollectionAsync($id = null, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->getOrderItemCollectionAsyncWithHttpInfo($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderItemCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemCollectionAsyncWithHttpInfo($id = null, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->getOrderItemCollectionRequest($id, $id2, $productName, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderItemCollection'
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderItemCollectionRequest($id = null, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/order_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($itemsPerPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderItemItem
     *
     * Retrieves a OrderItem resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem
     */
    public function getOrderItemItem($id)
    {
        list($response) = $this->getOrderItemItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrderItemItemWithHttpInfo
     *
     * Retrieves a OrderItem resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderItemItemWithHttpInfo($id)
    {
        $request = $this->getOrderItemItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderItemItemAsync
     *
     * Retrieves a OrderItem resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemItemAsync($id)
    {
        return $this->getOrderItemItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderItemItemAsyncWithHttpInfo
     *
     * Retrieves a OrderItem resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem';
        $request = $this->getOrderItemItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderItemItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderItemItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOrderItemItem'
            );
        }

        $resourcePath = '/order_items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderItemCollection
     *
     * Creates a OrderItem resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPostOrderItem $orderItem The new OrderItem resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem
     */
    public function postOrderItemCollection($orderItem = null)
    {
        list($response) = $this->postOrderItemCollectionWithHttpInfo($orderItem);
        return $response;
    }

    /**
     * Operation postOrderItemCollectionWithHttpInfo
     *
     * Creates a OrderItem resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPostOrderItem $orderItem The new OrderItem resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderItemCollectionWithHttpInfo($orderItem = null)
    {
        $request = $this->postOrderItemCollectionRequest($orderItem);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderItemCollectionAsync
     *
     * Creates a OrderItem resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPostOrderItem $orderItem The new OrderItem resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderItemCollectionAsync($orderItem = null)
    {
        return $this->postOrderItemCollectionAsyncWithHttpInfo($orderItem)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderItemCollectionAsyncWithHttpInfo
     *
     * Creates a OrderItem resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPostOrderItem $orderItem The new OrderItem resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderItemCollectionAsyncWithHttpInfo($orderItem = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem';
        $request = $this->postOrderItemCollectionRequest($orderItem);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderItemCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPostOrderItem $orderItem The new OrderItem resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrderItemCollectionRequest($orderItem = null)
    {

        $resourcePath = '/order_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($orderItem)) {
            $_tempBody = $orderItem;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrderItemItem
     *
     * Replaces the OrderItem resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPutOrderItem $orderItem The updated OrderItem resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem
     */
    public function putOrderItemItem($id, $orderItem = null)
    {
        list($response) = $this->putOrderItemItemWithHttpInfo($id, $orderItem);
        return $response;
    }

    /**
     * Operation putOrderItemItemWithHttpInfo
     *
     * Replaces the OrderItem resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPutOrderItem $orderItem The updated OrderItem resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrderItemItemWithHttpInfo($id, $orderItem = null)
    {
        $request = $this->putOrderItemItemRequest($id, $orderItem);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrderItemItemAsync
     *
     * Replaces the OrderItem resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPutOrderItem $orderItem The updated OrderItem resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemItemAsync($id, $orderItem = null)
    {
        return $this->putOrderItemItemAsyncWithHttpInfo($id, $orderItem)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrderItemItemAsyncWithHttpInfo
     *
     * Replaces the OrderItem resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPutOrderItem $orderItem The updated OrderItem resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemItemAsyncWithHttpInfo($id, $orderItem = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem';
        $request = $this->putOrderItemItemRequest($id, $orderItem);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrderItemItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderItemPutOrderItem $orderItem The updated OrderItem resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrderItemItemRequest($id, $orderItem = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOrderItemItem'
            );
        }

        $resourcePath = '/order_items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($orderItem)) {
            $_tempBody = $orderItem;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
