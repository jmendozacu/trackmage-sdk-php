<?php
/**
 * TrackingNumberApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: v0.1.40-86-ge2f1de7
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * TrackingNumberApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingNumberApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresource
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $trackingNumbers trackingNumbers (required)
     * @param  string $orderCheckpointDate orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]
     */
    public function apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresource($id, $workspaces, $trackingNumbers, $orderCheckpointDate = null)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceWithHttpInfo($id, $workspaces, $trackingNumbers, $orderCheckpointDate);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceWithHttpInfo($id, $workspaces, $trackingNumbers, $orderCheckpointDate = null)
    {
        $request = $this->apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceRequest($id, $workspaces, $trackingNumbers, $orderCheckpointDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceAsync($id, $workspaces, $trackingNumbers, $orderCheckpointDate = null)
    {
        return $this->apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $trackingNumbers, $orderCheckpointDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $trackingNumbers, $orderCheckpointDate = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
        $request = $this->apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceRequest($id, $workspaces, $trackingNumbers, $orderCheckpointDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresourceRequest($id, $workspaces, $trackingNumbers, $orderCheckpointDate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresource'
            );
        }
        // verify the required parameter 'trackingNumbers' is set
        if ($trackingNumbers === null || (is_array($trackingNumbers) && count($trackingNumbers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumbers when calling apiTeamsWorkspacesTrackingNumbersCheckpointsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_numbers/{trackingNumbers}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCheckpointDate !== null) {
            $queryParams['order[checkpointDate]'] = ObjectSerializer::toQueryValue($orderCheckpointDate);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($trackingNumbers !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumbers' . '}',
                ObjectSerializer::toPathValue($trackingNumbers),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresource
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderOrderId orderOrderId (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $orderId2 orderId2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresource($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresourceAsync
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresourceAsync($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
        $request = $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingNumbersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingNumbersGetSubresourceRequest($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingNumbersGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingNumbersGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderOrderId !== null) {
            $queryParams['order[orderId]'] = ObjectSerializer::toQueryValue($orderOrderId);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($orderId2 !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($orderId2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTrackingNumbersCheckpointsGetSubresource
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id id (required)
     * @param  string $orderCheckpointDate orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]
     */
    public function apiTrackingNumbersCheckpointsGetSubresource($id, $orderCheckpointDate = null)
    {
        list($response) = $this->apiTrackingNumbersCheckpointsGetSubresourceWithHttpInfo($id, $orderCheckpointDate);
        return $response;
    }

    /**
     * Operation apiTrackingNumbersCheckpointsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTrackingNumbersCheckpointsGetSubresourceWithHttpInfo($id, $orderCheckpointDate = null)
    {
        $request = $this->apiTrackingNumbersCheckpointsGetSubresourceRequest($id, $orderCheckpointDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTrackingNumbersCheckpointsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTrackingNumbersCheckpointsGetSubresourceAsync($id, $orderCheckpointDate = null)
    {
        return $this->apiTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo($id, $orderCheckpointDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo($id, $orderCheckpointDate = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
        $request = $this->apiTrackingNumbersCheckpointsGetSubresourceRequest($id, $orderCheckpointDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTrackingNumbersCheckpointsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTrackingNumbersCheckpointsGetSubresourceRequest($id, $orderCheckpointDate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTrackingNumbersCheckpointsGetSubresource'
            );
        }

        $resourcePath = '/tracking_numbers/{id}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCheckpointDate !== null) {
            $queryParams['order[checkpointDate]'] = ObjectSerializer::toQueryValue($orderCheckpointDate);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingNumbersCheckpointsGetSubresource
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id id (required)
     * @param  string $trackingNumbers trackingNumbers (required)
     * @param  string $orderCheckpointDate orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]
     */
    public function apiWorkspacesTrackingNumbersCheckpointsGetSubresource($id, $trackingNumbers, $orderCheckpointDate = null)
    {
        list($response) = $this->apiWorkspacesTrackingNumbersCheckpointsGetSubresourceWithHttpInfo($id, $trackingNumbers, $orderCheckpointDate);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingNumbersCheckpointsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingNumbersCheckpointsGetSubresourceWithHttpInfo($id, $trackingNumbers, $orderCheckpointDate = null)
    {
        $request = $this->apiWorkspacesTrackingNumbersCheckpointsGetSubresourceRequest($id, $trackingNumbers, $orderCheckpointDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingNumbersCheckpointsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingNumbersCheckpointsGetSubresourceAsync($id, $trackingNumbers, $orderCheckpointDate = null)
    {
        return $this->apiWorkspacesTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo($id, $trackingNumbers, $orderCheckpointDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingNumbersCheckpointsGetSubresourceAsyncWithHttpInfo($id, $trackingNumbers, $orderCheckpointDate = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
        $request = $this->apiWorkspacesTrackingNumbersCheckpointsGetSubresourceRequest($id, $trackingNumbers, $orderCheckpointDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingNumbersCheckpointsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $trackingNumbers (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingNumbersCheckpointsGetSubresourceRequest($id, $trackingNumbers, $orderCheckpointDate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingNumbersCheckpointsGetSubresource'
            );
        }
        // verify the required parameter 'trackingNumbers' is set
        if ($trackingNumbers === null || (is_array($trackingNumbers) && count($trackingNumbers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumbers when calling apiWorkspacesTrackingNumbersCheckpointsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_numbers/{trackingNumbers}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCheckpointDate !== null) {
            $queryParams['order[checkpointDate]'] = ObjectSerializer::toQueryValue($orderCheckpointDate);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($trackingNumbers !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumbers' . '}',
                ObjectSerializer::toPathValue($trackingNumbers),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresource
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderOrderId orderOrderId (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $orderId2 orderId2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]
     */
    public function apiWorkspacesTrackingNumbersGetSubresource($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiWorkspacesTrackingNumbersGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresourceAsync
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingNumbersGetSubresourceAsync($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
        $request = $this->apiWorkspacesTrackingNumbersGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingNumbersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingNumbersGetSubresourceRequest($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingNumbersGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderOrderId !== null) {
            $queryParams['order[orderId]'] = ObjectSerializer::toQueryValue($orderOrderId);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($orderId2 !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($orderId2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrackingNumberCollection
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderOrderId orderOrderId (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $orderId2 orderId2 (optional)
     * @param  int $id id (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[]
     */
    public function getTrackingNumberCollection($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getTrackingNumberCollectionWithHttpInfo($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getTrackingNumberCollectionWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingNumberCollectionWithHttpInfo($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getTrackingNumberCollectionRequest($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingNumberCollectionAsync
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingNumberCollectionAsync($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->getTrackingNumberCollectionAsyncWithHttpInfo($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingNumberCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingNumberCollectionAsyncWithHttpInfo($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumbers[]';
        $request = $this->getTrackingNumberCollectionRequest($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $orderId2, $id, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingNumberCollection'
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $orderId2 (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTrackingNumberCollectionRequest($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $orderId2 = null, $id = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/tracking_numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderOrderId !== null) {
            $queryParams['order[orderId]'] = ObjectSerializer::toQueryValue($orderOrderId);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($orderId2 !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($orderId2);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($itemsPerPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrackingNumberItem
     *
     * Retrieves a TrackingNumber resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta
     */
    public function getTrackingNumberItem($id)
    {
        list($response) = $this->getTrackingNumberItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTrackingNumberItemWithHttpInfo
     *
     * Retrieves a TrackingNumber resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingNumberItemWithHttpInfo($id)
    {
        $request = $this->getTrackingNumberItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingNumberItemAsync
     *
     * Retrieves a TrackingNumber resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingNumberItemAsync($id)
    {
        return $this->getTrackingNumberItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingNumberItemAsyncWithHttpInfo
     *
     * Retrieves a TrackingNumber resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingNumberItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta';
        $request = $this->getTrackingNumberItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingNumberItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTrackingNumberItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTrackingNumberItem'
            );
        }

        $resourcePath = '/tracking_numbers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postTrackingNumberCollection
     *
     * Creates a TrackingNumber resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPostTrackingNumberSetTrackingNumberMeta $trackingNumber The new TrackingNumber resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta
     */
    public function postTrackingNumberCollection($trackingNumber = null)
    {
        list($response) = $this->postTrackingNumberCollectionWithHttpInfo($trackingNumber);
        return $response;
    }

    /**
     * Operation postTrackingNumberCollectionWithHttpInfo
     *
     * Creates a TrackingNumber resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPostTrackingNumberSetTrackingNumberMeta $trackingNumber The new TrackingNumber resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTrackingNumberCollectionWithHttpInfo($trackingNumber = null)
    {
        $request = $this->postTrackingNumberCollectionRequest($trackingNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postTrackingNumberCollectionAsync
     *
     * Creates a TrackingNumber resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPostTrackingNumberSetTrackingNumberMeta $trackingNumber The new TrackingNumber resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTrackingNumberCollectionAsync($trackingNumber = null)
    {
        return $this->postTrackingNumberCollectionAsyncWithHttpInfo($trackingNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postTrackingNumberCollectionAsyncWithHttpInfo
     *
     * Creates a TrackingNumber resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPostTrackingNumberSetTrackingNumberMeta $trackingNumber The new TrackingNumber resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postTrackingNumberCollectionAsyncWithHttpInfo($trackingNumber = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta';
        $request = $this->postTrackingNumberCollectionRequest($trackingNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postTrackingNumberCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPostTrackingNumberSetTrackingNumberMeta $trackingNumber The new TrackingNumber resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postTrackingNumberCollectionRequest($trackingNumber = null)
    {

        $resourcePath = '/tracking_numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($trackingNumber)) {
            $_tempBody = $trackingNumber;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putTrackingNumberItem
     *
     * Replaces the TrackingNumber resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPutTrackingNumberSetTrackingNumberMeta $trackingNumber The updated TrackingNumber resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta
     */
    public function putTrackingNumberItem($id, $trackingNumber = null)
    {
        list($response) = $this->putTrackingNumberItemWithHttpInfo($id, $trackingNumber);
        return $response;
    }

    /**
     * Operation putTrackingNumberItemWithHttpInfo
     *
     * Replaces the TrackingNumber resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPutTrackingNumberSetTrackingNumberMeta $trackingNumber The updated TrackingNumber resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTrackingNumberItemWithHttpInfo($id, $trackingNumber = null)
    {
        $request = $this->putTrackingNumberItemRequest($id, $trackingNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putTrackingNumberItemAsync
     *
     * Replaces the TrackingNumber resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPutTrackingNumberSetTrackingNumberMeta $trackingNumber The updated TrackingNumber resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTrackingNumberItemAsync($id, $trackingNumber = null)
    {
        return $this->putTrackingNumberItemAsyncWithHttpInfo($id, $trackingNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putTrackingNumberItemAsyncWithHttpInfo
     *
     * Replaces the TrackingNumber resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPutTrackingNumberSetTrackingNumberMeta $trackingNumber The updated TrackingNumber resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTrackingNumberItemAsyncWithHttpInfo($id, $trackingNumber = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta';
        $request = $this->putTrackingNumberItemRequest($id, $trackingNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putTrackingNumberItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\TrackingNumberPutTrackingNumberSetTrackingNumberMeta $trackingNumber The updated TrackingNumber resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putTrackingNumberItemRequest($id, $trackingNumber = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putTrackingNumberItem'
            );
        }

        $resourcePath = '/tracking_numbers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($trackingNumber)) {
            $_tempBody = $trackingNumber;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
