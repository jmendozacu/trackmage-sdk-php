<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: remotes/origin/shipments-0-geb727cd
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function apiOrdersItemsGetSubresource($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        list($response) = $this->apiOrdersItemsGetSubresourceWithHttpInfo($id, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);
        return $response;
    }

    /**
     * Operation apiOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersItemsGetSubresourceWithHttpInfo($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $request = $this->apiOrdersItemsGetSubresourceRequest($id, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsGetSubresourceAsync($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        return $this->apiOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->apiOrdersItemsGetSubresourceRequest($id, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiOrdersItemsGetSubresourceRequest($id, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/orders/{id}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string[] $orderNumber2 orderNumber2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $address address (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]
     */
    public function apiTeamsWorkspacesOrdersGetSubresource($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsync($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        return $this->apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]';
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = ObjectSerializer::toQueryValue($orderOrderNumber);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = ObjectSerializer::toQueryValue($orderSubtotal);
        }
        // query params
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = ObjectSerializer::toQueryValue($orderTotal);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = ObjectSerializer::toQueryValue($orderNumber);
        }
        // query params
        if (is_array($orderNumber2)) {
            $orderNumber2 = ObjectSerializer::serializeCollection($orderNumber2, 'multi', true);
        }
        if ($orderNumber2 !== null) {
            $queryParams['orderNumber[]'] = ObjectSerializer::toQueryValue($orderNumber2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType);
        }
        // query params
        if (is_array($orderType2)) {
            $orderType2 = ObjectSerializer::serializeCollection($orderType2, 'multi', true);
        }
        if ($orderType2 !== null) {
            $queryParams['orderType[]'] = ObjectSerializer::toQueryValue($orderType2);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($subtotal !== null) {
            $queryParams['subtotal'] = ObjectSerializer::toQueryValue($subtotal);
        }
        // query params
        if (is_array($subtotal2)) {
            $subtotal2 = ObjectSerializer::serializeCollection($subtotal2, 'multi', true);
        }
        if ($subtotal2 !== null) {
            $queryParams['subtotal[]'] = ObjectSerializer::toQueryValue($subtotal2);
        }
        // query params
        if ($total !== null) {
            $queryParams['total'] = ObjectSerializer::toQueryValue($total);
        }
        // query params
        if (is_array($total2)) {
            $total2 = ObjectSerializer::serializeCollection($total2, 'multi', true);
        }
        if ($total2 !== null) {
            $queryParams['total[]'] = ObjectSerializer::toQueryValue($total2);
        }
        // query params
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = ObjectSerializer::toQueryValue($subtotalBetween);
        }
        // query params
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = ObjectSerializer::toQueryValue($subtotalGt);
        }
        // query params
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = ObjectSerializer::toQueryValue($subtotalGte);
        }
        // query params
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = ObjectSerializer::toQueryValue($subtotalLt);
        }
        // query params
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = ObjectSerializer::toQueryValue($subtotalLte);
        }
        // query params
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = ObjectSerializer::toQueryValue($totalBetween);
        }
        // query params
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = ObjectSerializer::toQueryValue($totalGt);
        }
        // query params
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = ObjectSerializer::toQueryValue($totalGte);
        }
        // query params
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = ObjectSerializer::toQueryValue($totalLt);
        }
        // query params
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = ObjectSerializer::toQueryValue($totalLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orders orders (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresource($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceAsync($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        return $this->apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders/{orders}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string[] $orderNumber2 orderNumber2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $address address (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]
     */
    public function apiWorkspacesOrdersGetSubresource($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        list($response) = $this->apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsync($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        return $this->apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder[]';
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersGetSubresourceRequest($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = ObjectSerializer::toQueryValue($orderOrderNumber);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = ObjectSerializer::toQueryValue($orderSubtotal);
        }
        // query params
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = ObjectSerializer::toQueryValue($orderTotal);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = ObjectSerializer::toQueryValue($orderNumber);
        }
        // query params
        if (is_array($orderNumber2)) {
            $orderNumber2 = ObjectSerializer::serializeCollection($orderNumber2, 'multi', true);
        }
        if ($orderNumber2 !== null) {
            $queryParams['orderNumber[]'] = ObjectSerializer::toQueryValue($orderNumber2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType);
        }
        // query params
        if (is_array($orderType2)) {
            $orderType2 = ObjectSerializer::serializeCollection($orderType2, 'multi', true);
        }
        if ($orderType2 !== null) {
            $queryParams['orderType[]'] = ObjectSerializer::toQueryValue($orderType2);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($subtotal !== null) {
            $queryParams['subtotal'] = ObjectSerializer::toQueryValue($subtotal);
        }
        // query params
        if (is_array($subtotal2)) {
            $subtotal2 = ObjectSerializer::serializeCollection($subtotal2, 'multi', true);
        }
        if ($subtotal2 !== null) {
            $queryParams['subtotal[]'] = ObjectSerializer::toQueryValue($subtotal2);
        }
        // query params
        if ($total !== null) {
            $queryParams['total'] = ObjectSerializer::toQueryValue($total);
        }
        // query params
        if (is_array($total2)) {
            $total2 = ObjectSerializer::serializeCollection($total2, 'multi', true);
        }
        if ($total2 !== null) {
            $queryParams['total[]'] = ObjectSerializer::toQueryValue($total2);
        }
        // query params
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = ObjectSerializer::toQueryValue($subtotalBetween);
        }
        // query params
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = ObjectSerializer::toQueryValue($subtotalGt);
        }
        // query params
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = ObjectSerializer::toQueryValue($subtotalGte);
        }
        // query params
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = ObjectSerializer::toQueryValue($subtotalLt);
        }
        // query params
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = ObjectSerializer::toQueryValue($subtotalLte);
        }
        // query params
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = ObjectSerializer::toQueryValue($totalBetween);
        }
        // query params
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = ObjectSerializer::toQueryValue($totalGt);
        }
        // query params
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = ObjectSerializer::toQueryValue($totalGte);
        }
        // query params
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = ObjectSerializer::toQueryValue($totalLt);
        }
        // query params
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = ObjectSerializer::toQueryValue($totalLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string $orders orders (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]
     */
    public function apiWorkspacesOrdersItemsGetSubresource($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        list($response) = $this->apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $request = $this->apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsGetSubresourceAsync($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        return $this->apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGetOrderItem[]';
        $request = $this->apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2, $productName, $externalSyncId, $externalSyncId2, $orderId, $orderProductName, $orderExternalSyncId, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2 = null, $productName = null, $externalSyncId = null, $externalSyncId2 = null, $orderId = null, $orderProductName = null, $orderExternalSyncId = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiWorkspacesOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders/{orders}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($productName !== null) {
            $queryParams['productName'] = ObjectSerializer::toQueryValue($productName);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = ObjectSerializer::toQueryValue($orderProductName);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = ObjectSerializer::toQueryValue($orderPrice);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if (is_array($price2)) {
            $price2 = ObjectSerializer::serializeCollection($price2, 'multi', true);
        }
        if ($price2 !== null) {
            $queryParams['price[]'] = ObjectSerializer::toQueryValue($price2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }
        // query params
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = ObjectSerializer::toQueryValue($priceBetween);
        }
        // query params
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = ObjectSerializer::toQueryValue($priceGt);
        }
        // query params
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = ObjectSerializer::toQueryValue($priceGte);
        }
        // query params
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = ObjectSerializer::toQueryValue($priceLt);
        }
        // query params
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = ObjectSerializer::toQueryValue($priceLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrderItem
     *
     * Removes the Order resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrderItem($id)
    {
        $this->deleteOrderItemWithHttpInfo($id);
    }

    /**
     * Operation deleteOrderItemWithHttpInfo
     *
     * Removes the Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderItemWithHttpInfo($id)
    {
        $request = $this->deleteOrderItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrderItemAsync
     *
     * Removes the Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemAsync($id)
    {
        return $this->deleteOrderItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrderItemAsyncWithHttpInfo
     *
     * Removes the Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOrderItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrderItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrderItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOrderItem'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderCollection
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $id id (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string[] $orderNumber2 orderNumber2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $address address (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[]
     */
    public function getOrderCollection($orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getOrderCollectionWithHttpInfo($orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getOrderCollectionWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCollectionWithHttpInfo($orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getOrderCollectionRequest($orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderCollectionAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCollectionAsync($orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->getOrderCollectionAsyncWithHttpInfo($orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCollectionAsyncWithHttpInfo($orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrdersGetOrderMetaGetOrderStatusForOrder[]';
        $request = $this->getOrderCollectionRequest($orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $orderNumber2, $externalSyncId, $externalSyncId2, $status, $status2, $orderType, $orderType2, $address, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderCollection'
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string[] $orderNumber2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $address (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderCollectionRequest($orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $orderNumber2 = null, $externalSyncId = null, $externalSyncId2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $address = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = ObjectSerializer::toQueryValue($orderOrderNumber);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = ObjectSerializer::toQueryValue($orderSubtotal);
        }
        // query params
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = ObjectSerializer::toQueryValue($orderTotal);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = ObjectSerializer::toQueryValue($orderNumber);
        }
        // query params
        if (is_array($orderNumber2)) {
            $orderNumber2 = ObjectSerializer::serializeCollection($orderNumber2, 'multi', true);
        }
        if ($orderNumber2 !== null) {
            $queryParams['orderNumber[]'] = ObjectSerializer::toQueryValue($orderNumber2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType);
        }
        // query params
        if (is_array($orderType2)) {
            $orderType2 = ObjectSerializer::serializeCollection($orderType2, 'multi', true);
        }
        if ($orderType2 !== null) {
            $queryParams['orderType[]'] = ObjectSerializer::toQueryValue($orderType2);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address);
        }
        // query params
        if ($subtotal !== null) {
            $queryParams['subtotal'] = ObjectSerializer::toQueryValue($subtotal);
        }
        // query params
        if (is_array($subtotal2)) {
            $subtotal2 = ObjectSerializer::serializeCollection($subtotal2, 'multi', true);
        }
        if ($subtotal2 !== null) {
            $queryParams['subtotal[]'] = ObjectSerializer::toQueryValue($subtotal2);
        }
        // query params
        if ($total !== null) {
            $queryParams['total'] = ObjectSerializer::toQueryValue($total);
        }
        // query params
        if (is_array($total2)) {
            $total2 = ObjectSerializer::serializeCollection($total2, 'multi', true);
        }
        if ($total2 !== null) {
            $queryParams['total[]'] = ObjectSerializer::toQueryValue($total2);
        }
        // query params
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = ObjectSerializer::toQueryValue($subtotalBetween);
        }
        // query params
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = ObjectSerializer::toQueryValue($subtotalGt);
        }
        // query params
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = ObjectSerializer::toQueryValue($subtotalGte);
        }
        // query params
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = ObjectSerializer::toQueryValue($subtotalLt);
        }
        // query params
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = ObjectSerializer::toQueryValue($subtotalLte);
        }
        // query params
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = ObjectSerializer::toQueryValue($totalBetween);
        }
        // query params
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = ObjectSerializer::toQueryValue($totalGt);
        }
        // query params
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = ObjectSerializer::toQueryValue($totalGte);
        }
        // query params
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = ObjectSerializer::toQueryValue($totalLt);
        }
        // query params
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = ObjectSerializer::toQueryValue($totalLte);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($itemsPerPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderItem
     *
     * Retrieves a Order resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder
     */
    public function getOrderItem($id)
    {
        list($response) = $this->getOrderItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrderItemWithHttpInfo
     *
     * Retrieves a Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderItemWithHttpInfo($id)
    {
        $request = $this->getOrderItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderItemAsync
     *
     * Retrieves a Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemAsync($id)
    {
        return $this->getOrderItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderItemAsyncWithHttpInfo
     *
     * Retrieves a Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder';
        $request = $this->getOrderItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOrderItem'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrateOrderCollection
     *
     * Migrate orders from old status to a new one
     *
     * @param  \TrackMage\Client\Swagger\Model\Order9f235eff7e914c651ace3fcc3d169fd6SetMigrateOrdersRequest $order The new Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse
     */
    public function migrateOrderCollection($order = null)
    {
        list($response) = $this->migrateOrderCollectionWithHttpInfo($order);
        return $response;
    }

    /**
     * Operation migrateOrderCollectionWithHttpInfo
     *
     * Migrate orders from old status to a new one
     *
     * @param  \TrackMage\Client\Swagger\Model\Order9f235eff7e914c651ace3fcc3d169fd6SetMigrateOrdersRequest $order The new Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrateOrderCollectionWithHttpInfo($order = null)
    {
        $request = $this->migrateOrderCollectionRequest($order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation migrateOrderCollectionAsync
     *
     * Migrate orders from old status to a new one
     *
     * @param  \TrackMage\Client\Swagger\Model\Order9f235eff7e914c651ace3fcc3d169fd6SetMigrateOrdersRequest $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateOrderCollectionAsync($order = null)
    {
        return $this->migrateOrderCollectionAsyncWithHttpInfo($order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation migrateOrderCollectionAsyncWithHttpInfo
     *
     * Migrate orders from old status to a new one
     *
     * @param  \TrackMage\Client\Swagger\Model\Order9f235eff7e914c651ace3fcc3d169fd6SetMigrateOrdersRequest $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateOrderCollectionAsyncWithHttpInfo($order = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\Order159339841dc29518f4db0fcf51e5430dGetMigrateOrdersResponse';
        $request = $this->migrateOrderCollectionRequest($order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'migrateOrderCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\Order9f235eff7e914c651ace3fcc3d169fd6SetMigrateOrdersRequest $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function migrateOrderCollectionRequest($order = null)
    {

        $resourcePath = '/orders-migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderCollection
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPostOrderSetOrderMetaSetOrderStatusForOrder $order The new Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder
     */
    public function postOrderCollection($order = null)
    {
        list($response) = $this->postOrderCollectionWithHttpInfo($order);
        return $response;
    }

    /**
     * Operation postOrderCollectionWithHttpInfo
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPostOrderSetOrderMetaSetOrderStatusForOrder $order The new Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderCollectionWithHttpInfo($order = null)
    {
        $request = $this->postOrderCollectionRequest($order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderCollectionAsync
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPostOrderSetOrderMetaSetOrderStatusForOrder $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderCollectionAsync($order = null)
    {
        return $this->postOrderCollectionAsyncWithHttpInfo($order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderCollectionAsyncWithHttpInfo
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPostOrderSetOrderMetaSetOrderStatusForOrder $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderCollectionAsyncWithHttpInfo($order = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder';
        $request = $this->postOrderCollectionRequest($order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPostOrderSetOrderMetaSetOrderStatusForOrder $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrderCollectionRequest($order = null)
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrderItem
     *
     * Replaces the Order resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPutOrderSetOrderMetaSetOrderStatusForOrder $order The updated Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder
     */
    public function putOrderItem($id, $order = null)
    {
        list($response) = $this->putOrderItemWithHttpInfo($id, $order);
        return $response;
    }

    /**
     * Operation putOrderItemWithHttpInfo
     *
     * Replaces the Order resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPutOrderSetOrderMetaSetOrderStatusForOrder $order The updated Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrderItemWithHttpInfo($id, $order = null)
    {
        $request = $this->putOrderItemRequest($id, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrderItemAsync
     *
     * Replaces the Order resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPutOrderSetOrderMetaSetOrderStatusForOrder $order The updated Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemAsync($id, $order = null)
    {
        return $this->putOrderItemAsyncWithHttpInfo($id, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrderItemAsyncWithHttpInfo
     *
     * Replaces the Order resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPutOrderSetOrderMetaSetOrderStatusForOrder $order The updated Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemAsyncWithHttpInfo($id, $order = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrder';
        $request = $this->putOrderItemRequest($id, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrderItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPutOrderSetOrderMetaSetOrderStatusForOrder $order The updated Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrderItemRequest($id, $order = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOrderItem'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
