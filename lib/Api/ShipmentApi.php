<?php
/**
 * ShipmentApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: v0.1.41-7-gcca08cf
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * ShipmentApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiShipmentsCheckpointsGetSubresource
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id id (required)
     * @param  string $orderCheckpointDate orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]
     */
    public function apiShipmentsCheckpointsGetSubresource($id, $orderCheckpointDate = null)
    {
        list($response) = $this->apiShipmentsCheckpointsGetSubresourceWithHttpInfo($id, $orderCheckpointDate);
        return $response;
    }

    /**
     * Operation apiShipmentsCheckpointsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiShipmentsCheckpointsGetSubresourceWithHttpInfo($id, $orderCheckpointDate = null)
    {
        $request = $this->apiShipmentsCheckpointsGetSubresourceRequest($id, $orderCheckpointDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiShipmentsCheckpointsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiShipmentsCheckpointsGetSubresourceAsync($id, $orderCheckpointDate = null)
    {
        return $this->apiShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo($id, $orderCheckpointDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo($id, $orderCheckpointDate = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
        $request = $this->apiShipmentsCheckpointsGetSubresourceRequest($id, $orderCheckpointDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiShipmentsCheckpointsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiShipmentsCheckpointsGetSubresourceRequest($id, $orderCheckpointDate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiShipmentsCheckpointsGetSubresource'
            );
        }

        $resourcePath = '/shipments/{id}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCheckpointDate !== null) {
            $queryParams['order[checkpointDate]'] = ObjectSerializer::toQueryValue($orderCheckpointDate);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiShipmentsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiShipmentsShipmentItemsGetSubresource($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiShipmentsShipmentItemsGetSubresourceWithHttpInfo($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiShipmentsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiShipmentsShipmentItemsGetSubresourceWithHttpInfo($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiShipmentsShipmentItemsGetSubresourceRequest($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiShipmentsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiShipmentsShipmentItemsGetSubresourceAsync($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiShipmentsShipmentItemsGetSubresourceRequest($id, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiShipmentsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiShipmentsShipmentItemsGetSubresourceRequest($id, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiShipmentsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/shipments/{id}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsCheckpointsGetSubresource
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $shipments shipments (required)
     * @param  string $orderCheckpointDate orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]
     */
    public function apiTeamsWorkspacesShipmentsCheckpointsGetSubresource($id, $workspaces, $shipments, $orderCheckpointDate = null)
    {
        list($response) = $this->apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceWithHttpInfo($id, $workspaces, $shipments, $orderCheckpointDate);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceWithHttpInfo($id, $workspaces, $shipments, $orderCheckpointDate = null)
    {
        $request = $this->apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceRequest($id, $workspaces, $shipments, $orderCheckpointDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceAsync($id, $workspaces, $shipments, $orderCheckpointDate = null)
    {
        return $this->apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $shipments, $orderCheckpointDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $shipments, $orderCheckpointDate = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
        $request = $this->apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceRequest($id, $workspaces, $shipments, $orderCheckpointDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesShipmentsCheckpointsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesShipmentsCheckpointsGetSubresourceRequest($id, $workspaces, $shipments, $orderCheckpointDate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesShipmentsCheckpointsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesShipmentsCheckpointsGetSubresource'
            );
        }
        // verify the required parameter 'shipments' is set
        if ($shipments === null || (is_array($shipments) && count($shipments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipments when calling apiTeamsWorkspacesShipmentsCheckpointsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/shipments/{shipments}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCheckpointDate !== null) {
            $queryParams['order[checkpointDate]'] = ObjectSerializer::toQueryValue($orderCheckpointDate);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($shipments !== null) {
            $resourcePath = str_replace(
                '{' . 'shipments' . '}',
                ObjectSerializer::toPathValue($shipments),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresource
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]
     */
    public function apiTeamsWorkspacesShipmentsGetSubresource($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceAsync($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
        $request = $this->apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesShipmentsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesShipmentsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesShipmentsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = ObjectSerializer::toQueryValue($orderNumbers);
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'csv', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = ObjectSerializer::toQueryValue($orderNumbers2);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $shipments shipments (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiTeamsWorkspacesShipmentsShipmentItemsGetSubresource($id, $workspaces, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceWithHttpInfo($id, $workspaces, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceWithHttpInfo($id, $workspaces, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceRequest($id, $workspaces, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceAsync($id, $workspaces, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceRequest($id, $workspaces, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesShipmentsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesShipmentsShipmentItemsGetSubresourceRequest($id, $workspaces, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesShipmentsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesShipmentsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'shipments' is set
        if ($shipments === null || (is_array($shipments) && count($shipments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipments when calling apiTeamsWorkspacesShipmentsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/shipments/{shipments}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($shipments !== null) {
            $resourcePath = str_replace(
                '{' . 'shipments' . '}',
                ObjectSerializer::toPathValue($shipments),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesShipmentsCheckpointsGetSubresource
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id id (required)
     * @param  string $shipments shipments (required)
     * @param  string $orderCheckpointDate orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]
     */
    public function apiWorkspacesShipmentsCheckpointsGetSubresource($id, $shipments, $orderCheckpointDate = null)
    {
        list($response) = $this->apiWorkspacesShipmentsCheckpointsGetSubresourceWithHttpInfo($id, $shipments, $orderCheckpointDate);
        return $response;
    }

    /**
     * Operation apiWorkspacesShipmentsCheckpointsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesShipmentsCheckpointsGetSubresourceWithHttpInfo($id, $shipments, $orderCheckpointDate = null)
    {
        $request = $this->apiWorkspacesShipmentsCheckpointsGetSubresourceRequest($id, $shipments, $orderCheckpointDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesShipmentsCheckpointsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsCheckpointsGetSubresourceAsync($id, $shipments, $orderCheckpointDate = null)
    {
        return $this->apiWorkspacesShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo($id, $shipments, $orderCheckpointDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingCheckpoint resources.
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsCheckpointsGetSubresourceAsyncWithHttpInfo($id, $shipments, $orderCheckpointDate = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingCheckpointGetTrackingCheckpoint[]';
        $request = $this->apiWorkspacesShipmentsCheckpointsGetSubresourceRequest($id, $shipments, $orderCheckpointDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesShipmentsCheckpointsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string $orderCheckpointDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesShipmentsCheckpointsGetSubresourceRequest($id, $shipments, $orderCheckpointDate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesShipmentsCheckpointsGetSubresource'
            );
        }
        // verify the required parameter 'shipments' is set
        if ($shipments === null || (is_array($shipments) && count($shipments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipments when calling apiWorkspacesShipmentsCheckpointsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/shipments/{shipments}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCheckpointDate !== null) {
            $queryParams['order[checkpointDate]'] = ObjectSerializer::toQueryValue($orderCheckpointDate);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($shipments !== null) {
            $resourcePath = str_replace(
                '{' . 'shipments' . '}',
                ObjectSerializer::toPathValue($shipments),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresource
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]
     */
    public function apiWorkspacesShipmentsGetSubresource($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsGetSubresourceAsync($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
        $request = $this->apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesShipmentsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesShipmentsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = ObjectSerializer::toQueryValue($orderNumbers);
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'csv', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = ObjectSerializer::toQueryValue($orderNumbers2);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesShipmentsShipmentItemsGetSubresource
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id id (required)
     * @param  string $shipments shipments (required)
     * @param  string[] $id2 id2 (optional)
     * @param  int $shipmentId shipmentId (optional)
     * @param  int[] $shipmentId2 shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber shipmentTrackingNumber (optional)
     * @param  string $orderItemId orderItemId (optional)
     * @param  string[] $orderItemId2 orderItemId2 (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]
     */
    public function apiWorkspacesShipmentsShipmentItemsGetSubresource($id, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        list($response) = $this->apiWorkspacesShipmentsShipmentItemsGetSubresourceWithHttpInfo($id, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesShipmentsShipmentItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesShipmentsShipmentItemsGetSubresourceWithHttpInfo($id, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $request = $this->apiWorkspacesShipmentsShipmentItemsGetSubresourceRequest($id, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesShipmentsShipmentItemsGetSubresourceAsync
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsShipmentItemsGetSubresourceAsync($id, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        return $this->apiWorkspacesShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of ShipmentItem resources.
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsShipmentItemsGetSubresourceAsyncWithHttpInfo($id, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentItemGetShipmentItem[]';
        $request = $this->apiWorkspacesShipmentsShipmentItemsGetSubresourceRequest($id, $shipments, $id2, $shipmentId, $shipmentId2, $shipmentTrackingNumber, $orderItemId, $orderItemId2, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $workspaceId, $workspaceId2, $orderId, $orderQty, $qty, $qty2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesShipmentsShipmentItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $shipments (required)
     * @param  string[] $id2 (optional)
     * @param  int $shipmentId (optional)
     * @param  int[] $shipmentId2 (optional)
     * @param  string $shipmentTrackingNumber (optional)
     * @param  string $orderItemId (optional)
     * @param  string[] $orderItemId2 (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderQty (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesShipmentsShipmentItemsGetSubresourceRequest($id, $shipments, $id2 = null, $shipmentId = null, $shipmentId2 = null, $shipmentTrackingNumber = null, $orderItemId = null, $orderItemId2 = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderQty = null, $qty = null, $qty2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesShipmentsShipmentItemsGetSubresource'
            );
        }
        // verify the required parameter 'shipments' is set
        if ($shipments === null || (is_array($shipments) && count($shipments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipments when calling apiWorkspacesShipmentsShipmentItemsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/shipments/{shipments}/shipment_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($shipmentId !== null) {
            $queryParams['shipment.id'] = ObjectSerializer::toQueryValue($shipmentId);
        }
        // query params
        if (is_array($shipmentId2)) {
            $shipmentId2 = ObjectSerializer::serializeCollection($shipmentId2, 'multi', true);
        }
        if ($shipmentId2 !== null) {
            $queryParams['shipment.id[]'] = ObjectSerializer::toQueryValue($shipmentId2);
        }
        // query params
        if ($shipmentTrackingNumber !== null) {
            $queryParams['shipment.trackingNumber'] = ObjectSerializer::toQueryValue($shipmentTrackingNumber);
        }
        // query params
        if ($orderItemId !== null) {
            $queryParams['orderItem.id'] = ObjectSerializer::toQueryValue($orderItemId);
        }
        // query params
        if (is_array($orderItemId2)) {
            $orderItemId2 = ObjectSerializer::serializeCollection($orderItemId2, 'multi', true);
        }
        if ($orderItemId2 !== null) {
            $queryParams['orderItem.id[]'] = ObjectSerializer::toQueryValue($orderItemId2);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = ObjectSerializer::toQueryValue($orderQty);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = ObjectSerializer::toQueryValue($qty);
        }
        // query params
        if (is_array($qty2)) {
            $qty2 = ObjectSerializer::serializeCollection($qty2, 'multi', true);
        }
        if ($qty2 !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty2);
        }
        // query params
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = ObjectSerializer::toQueryValue($qtyBetween);
        }
        // query params
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = ObjectSerializer::toQueryValue($qtyGt);
        }
        // query params
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = ObjectSerializer::toQueryValue($qtyGte);
        }
        // query params
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = ObjectSerializer::toQueryValue($qtyLt);
        }
        // query params
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = ObjectSerializer::toQueryValue($qtyLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($shipments !== null) {
            $resourcePath = str_replace(
                '{' . 'shipments' . '}',
                ObjectSerializer::toPathValue($shipments),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShipmentItem
     *
     * Removes the Shipment resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteShipmentItem($id)
    {
        $this->deleteShipmentItemWithHttpInfo($id);
    }

    /**
     * Operation deleteShipmentItemWithHttpInfo
     *
     * Removes the Shipment resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShipmentItemWithHttpInfo($id)
    {
        $request = $this->deleteShipmentItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShipmentItemAsync
     *
     * Removes the Shipment resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShipmentItemAsync($id)
    {
        return $this->deleteShipmentItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShipmentItemAsyncWithHttpInfo
     *
     * Removes the Shipment resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShipmentItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteShipmentItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShipmentItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShipmentItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteShipmentItem'
            );
        }

        $resourcePath = '/shipments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentCollection
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  int $id id (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int $id2 id2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[]
     */
    public function getShipmentCollection($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getShipmentCollectionWithHttpInfo($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getShipmentCollectionWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $id2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentCollectionWithHttpInfo($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getShipmentCollectionRequest($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentCollectionAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $id2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentCollectionAsync($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->getShipmentCollectionAsyncWithHttpInfo($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $id2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentCollectionAsyncWithHttpInfo($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentsGetAddress[]';
        $request = $this->getShipmentCollectionRequest($orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentCollection'
     *
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int $id (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int $id2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShipmentCollectionRequest($orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = ObjectSerializer::toQueryValue($orderNumbers);
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'csv', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = ObjectSerializer::toQueryValue($orderNumbers2);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($id2 !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($itemsPerPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentItem
     *
     * Retrieves a Shipment resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress
     */
    public function getShipmentItem($id)
    {
        list($response) = $this->getShipmentItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getShipmentItemWithHttpInfo
     *
     * Retrieves a Shipment resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentItemWithHttpInfo($id)
    {
        $request = $this->getShipmentItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentItemAsync
     *
     * Retrieves a Shipment resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentItemAsync($id)
    {
        return $this->getShipmentItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentItemAsyncWithHttpInfo
     *
     * Retrieves a Shipment resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress';
        $request = $this->getShipmentItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShipmentItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getShipmentItem'
            );
        }

        $resourcePath = '/shipments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postShipmentCollection
     *
     * Creates a Shipment resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPostShipmentSetShipmentMetaSetAddress $shipment The new Shipment resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress
     */
    public function postShipmentCollection($shipment = null)
    {
        list($response) = $this->postShipmentCollectionWithHttpInfo($shipment);
        return $response;
    }

    /**
     * Operation postShipmentCollectionWithHttpInfo
     *
     * Creates a Shipment resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPostShipmentSetShipmentMetaSetAddress $shipment The new Shipment resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function postShipmentCollectionWithHttpInfo($shipment = null)
    {
        $request = $this->postShipmentCollectionRequest($shipment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postShipmentCollectionAsync
     *
     * Creates a Shipment resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPostShipmentSetShipmentMetaSetAddress $shipment The new Shipment resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postShipmentCollectionAsync($shipment = null)
    {
        return $this->postShipmentCollectionAsyncWithHttpInfo($shipment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postShipmentCollectionAsyncWithHttpInfo
     *
     * Creates a Shipment resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPostShipmentSetShipmentMetaSetAddress $shipment The new Shipment resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postShipmentCollectionAsyncWithHttpInfo($shipment = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress';
        $request = $this->postShipmentCollectionRequest($shipment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postShipmentCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPostShipmentSetShipmentMetaSetAddress $shipment The new Shipment resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postShipmentCollectionRequest($shipment = null)
    {

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($shipment)) {
            $_tempBody = $shipment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putShipmentItem
     *
     * Replaces the Shipment resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPutShipmentSetShipmentMetaSetAddress $shipment The updated Shipment resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress
     */
    public function putShipmentItem($id, $shipment = null)
    {
        list($response) = $this->putShipmentItemWithHttpInfo($id, $shipment);
        return $response;
    }

    /**
     * Operation putShipmentItemWithHttpInfo
     *
     * Replaces the Shipment resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPutShipmentSetShipmentMetaSetAddress $shipment The updated Shipment resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function putShipmentItemWithHttpInfo($id, $shipment = null)
    {
        $request = $this->putShipmentItemRequest($id, $shipment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putShipmentItemAsync
     *
     * Replaces the Shipment resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPutShipmentSetShipmentMetaSetAddress $shipment The updated Shipment resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putShipmentItemAsync($id, $shipment = null)
    {
        return $this->putShipmentItemAsyncWithHttpInfo($id, $shipment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putShipmentItemAsyncWithHttpInfo
     *
     * Replaces the Shipment resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPutShipmentSetShipmentMetaSetAddress $shipment The updated Shipment resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putShipmentItemAsyncWithHttpInfo($id, $shipment = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress';
        $request = $this->putShipmentItemRequest($id, $shipment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putShipmentItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\ShipmentPutShipmentSetShipmentMetaSetAddress $shipment The updated Shipment resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putShipmentItemRequest($id, $shipment = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putShipmentItem'
            );
        }

        $resourcePath = '/shipments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($shipment)) {
            $_tempBody = $shipment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
