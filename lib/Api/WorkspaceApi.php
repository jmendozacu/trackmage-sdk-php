<?php
/**
 * WorkspaceApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * OpenAPI spec version: v0.1.40-5-g0495724
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * WorkspaceApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkspaceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTeamsWorkspacesFieldsGetSubresource
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]
     */
    public function apiTeamsWorkspacesFieldsGetSubresource($id, $workspaces, $workspaceId = null, $workspaceId2 = null)
    {
        list($response) = $this->apiTeamsWorkspacesFieldsGetSubresourceWithHttpInfo($id, $workspaces, $workspaceId, $workspaceId2);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesFieldsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesFieldsGetSubresourceWithHttpInfo($id, $workspaces, $workspaceId = null, $workspaceId2 = null)
    {
        $request = $this->apiTeamsWorkspacesFieldsGetSubresourceRequest($id, $workspaces, $workspaceId, $workspaceId2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesFieldsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesFieldsGetSubresourceAsync($id, $workspaces, $workspaceId = null, $workspaceId2 = null)
    {
        return $this->apiTeamsWorkspacesFieldsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $workspaceId, $workspaceId2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesFieldsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesFieldsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $workspaceId = null, $workspaceId2 = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]';
        $request = $this->apiTeamsWorkspacesFieldsGetSubresourceRequest($id, $workspaces, $workspaceId, $workspaceId2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesFieldsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesFieldsGetSubresourceRequest($id, $workspaces, $workspaceId = null, $workspaceId2 = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesFieldsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesFieldsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresource
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id id (required)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]
     */
    public function apiTeamsWorkspacesGetSubresource($id, $orderCreatedAt = null)
    {
        list($response) = $this->apiTeamsWorkspacesGetSubresourceWithHttpInfo($id, $orderCreatedAt);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesGetSubresourceWithHttpInfo($id, $orderCreatedAt = null)
    {
        $request = $this->apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceAsync
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesGetSubresourceAsync($id, $orderCreatedAt = null)
    {
        return $this->apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo($id, $orderCreatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo($id, $orderCreatedAt = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
        $request = $this->apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresource
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderCarrier orderCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderSentFrom orderSentFrom (optional)
     * @param  string $orderSentTo orderSentTo (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderOrderId orderOrderId (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $carrier carrier (optional)
     * @param  string[] $carrier2 carrier2 (optional)
     * @param  string $sentFrom sentFrom (optional)
     * @param  string $sentTo sentTo (optional)
     * @param  string $email email (optional)
     * @param  string $orderId orderId (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresource($id, $workspaces, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $workspaces, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $workspaces, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceRequest($id, $workspaces, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresourceAsync
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresourceAsync($id, $workspaces, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
        $request = $this->apiTeamsWorkspacesTrackingNumbersGetSubresourceRequest($id, $workspaces, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingNumbersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingNumbersGetSubresourceRequest($id, $workspaces, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingNumbersGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingNumbersGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderCarrier !== null) {
            $queryParams['order[carrier]'] = ObjectSerializer::toQueryValue($orderCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderSentFrom !== null) {
            $queryParams['order[sentFrom]'] = ObjectSerializer::toQueryValue($orderSentFrom);
        }
        // query params
        if ($orderSentTo !== null) {
            $queryParams['order[sentTo]'] = ObjectSerializer::toQueryValue($orderSentTo);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderOrderId !== null) {
            $queryParams['order[orderId]'] = ObjectSerializer::toQueryValue($orderOrderId);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($carrier !== null) {
            $queryParams['carrier'] = ObjectSerializer::toQueryValue($carrier);
        }
        // query params
        if (is_array($carrier2)) {
            $carrier2 = ObjectSerializer::serializeCollection($carrier2, 'multi', true);
        }
        if ($carrier2 !== null) {
            $queryParams['carrier[]'] = ObjectSerializer::toQueryValue($carrier2);
        }
        // query params
        if ($sentFrom !== null) {
            $queryParams['sentFrom'] = ObjectSerializer::toQueryValue($sentFrom);
        }
        // query params
        if ($sentTo !== null) {
            $queryParams['sentTo'] = ObjectSerializer::toQueryValue($sentTo);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource($id, $workspaces)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id, $workspaces);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id, $workspaces)
    {
        $request = $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id, $workspaces);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsync($id, $workspaces)
    {
        return $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id, $workspaces)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id, $workspaces)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
        $request = $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id, $workspaces);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id, $workspaces)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_page_link_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresource
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresource($id, $workspaces)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $workspaces);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $workspaces)
    {
        $request = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceAsync($id, $workspaces)
    {
        return $this->apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $workspaces)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $workspaces)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
        $request = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingPagesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingPagesGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingPagesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $direction direction (optional)
     * @param  string[] $direction2 direction2 (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresource($id, $workspaces, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        list($response) = $this->apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $direction, $direction2, $orderCreatedAt);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $direction, $direction2, $orderCreatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsync($id, $workspaces, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        return $this->apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $direction, $direction2, $orderCreatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]';
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $direction, $direction2, $orderCreatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if (is_array($direction2)) {
            $direction2 = ObjectSerializer::serializeCollection($direction2, 'multi', true);
        }
        if ($direction2 !== null) {
            $queryParams['direction[]'] = ObjectSerializer::toQueryValue($direction2);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesFieldsGetSubresource
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id id (required)
     * @param  int $workspaceId workspaceId (optional)
     * @param  int[] $workspaceId2 workspaceId2 (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]
     */
    public function apiWorkspacesFieldsGetSubresource($id, $workspaceId = null, $workspaceId2 = null)
    {
        list($response) = $this->apiWorkspacesFieldsGetSubresourceWithHttpInfo($id, $workspaceId, $workspaceId2);
        return $response;
    }

    /**
     * Operation apiWorkspacesFieldsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesFieldsGetSubresourceWithHttpInfo($id, $workspaceId = null, $workspaceId2 = null)
    {
        $request = $this->apiWorkspacesFieldsGetSubresourceRequest($id, $workspaceId, $workspaceId2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesFieldsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesFieldsGetSubresourceAsync($id, $workspaceId = null, $workspaceId2 = null)
    {
        return $this->apiWorkspacesFieldsGetSubresourceAsyncWithHttpInfo($id, $workspaceId, $workspaceId2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesFieldsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumberField resources.
     *
     * @param  string $id (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesFieldsGetSubresourceAsyncWithHttpInfo($id, $workspaceId = null, $workspaceId2 = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberFieldGetTrackingNumberField[]';
        $request = $this->apiWorkspacesFieldsGetSubresourceRequest($id, $workspaceId, $workspaceId2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesFieldsGetSubresource'
     *
     * @param  string $id (required)
     * @param  int $workspaceId (optional)
     * @param  int[] $workspaceId2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesFieldsGetSubresourceRequest($id, $workspaceId = null, $workspaceId2 = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesFieldsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if (is_array($workspaceId2)) {
            $workspaceId2 = ObjectSerializer::serializeCollection($workspaceId2, 'multi', true);
        }
        if ($workspaceId2 !== null) {
            $queryParams['workspace.id[]'] = ObjectSerializer::toQueryValue($workspaceId2);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresource
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id id (required)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderCarrier orderCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderSentFrom orderSentFrom (optional)
     * @param  string $orderSentTo orderSentTo (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderOrderId orderOrderId (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $carrier carrier (optional)
     * @param  string[] $carrier2 carrier2 (optional)
     * @param  string $sentFrom sentFrom (optional)
     * @param  string $sentTo sentTo (optional)
     * @param  string $email email (optional)
     * @param  string $orderId orderId (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]
     */
    public function apiWorkspacesTrackingNumbersGetSubresource($id, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingNumbersGetSubresourceWithHttpInfo($id, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiWorkspacesTrackingNumbersGetSubresourceRequest($id, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresourceAsync
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingNumbersGetSubresourceAsync($id, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingNumber resources.
     *
     * @param  string $id (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingNumbersGetSubresourceAsyncWithHttpInfo($id, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingNumberGetTrackingNumberGetTrackingNumberMeta[]';
        $request = $this->apiWorkspacesTrackingNumbersGetSubresourceRequest($id, $orderTrackingNumber, $orderStatus, $orderCarrier, $orderCreatedAt, $orderUpdatedAt, $orderSentFrom, $orderSentTo, $orderEmail, $orderOrderId, $orderDaysInTransit, $orderReviewTotalScore, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $trackingNumber, $status, $status2, $carrier, $carrier2, $sentFrom, $sentTo, $email, $orderId, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingNumbersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderSentFrom (optional)
     * @param  string $orderSentTo (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderOrderId (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $carrier (optional)
     * @param  string[] $carrier2 (optional)
     * @param  string $sentFrom (optional)
     * @param  string $sentTo (optional)
     * @param  string $email (optional)
     * @param  string $orderId (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingNumbersGetSubresourceRequest($id, $orderTrackingNumber = null, $orderStatus = null, $orderCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderSentFrom = null, $orderSentTo = null, $orderEmail = null, $orderOrderId = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $trackingNumber = null, $status = null, $status2 = null, $carrier = null, $carrier2 = null, $sentFrom = null, $sentTo = null, $email = null, $orderId = null, $id2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingNumbersGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderCarrier !== null) {
            $queryParams['order[carrier]'] = ObjectSerializer::toQueryValue($orderCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderSentFrom !== null) {
            $queryParams['order[sentFrom]'] = ObjectSerializer::toQueryValue($orderSentFrom);
        }
        // query params
        if ($orderSentTo !== null) {
            $queryParams['order[sentTo]'] = ObjectSerializer::toQueryValue($orderSentTo);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderOrderId !== null) {
            $queryParams['order[orderId]'] = ObjectSerializer::toQueryValue($orderOrderId);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($carrier !== null) {
            $queryParams['carrier'] = ObjectSerializer::toQueryValue($carrier);
        }
        // query params
        if (is_array($carrier2)) {
            $carrier2 = ObjectSerializer::serializeCollection($carrier2, 'multi', true);
        }
        if ($carrier2 !== null) {
            $queryParams['carrier[]'] = ObjectSerializer::toQueryValue($carrier2);
        }
        // query params
        if ($sentFrom !== null) {
            $queryParams['sentFrom'] = ObjectSerializer::toQueryValue($sentFrom);
        }
        // query params
        if ($sentTo !== null) {
            $queryParams['sentTo'] = ObjectSerializer::toQueryValue($sentTo);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresource
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresource($id)
    {
        list($response) = $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id)
    {
        $request = $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsync($id)
    {
        return $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
        $request = $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingPageLinkSettingsGetSubresource'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingPageLinkSettingsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_page_link_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresource
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]
     */
    public function apiWorkspacesTrackingPagesGetSubresource($id)
    {
        list($response) = $this->apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id)
    {
        $request = $this->apiWorkspacesTrackingPagesGetSubresourceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPagesGetSubresourceAsync($id)
    {
        return $this->apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
        $request = $this->apiWorkspacesTrackingPagesGetSubresourceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingPagesGetSubresource'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingPagesGetSubresourceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingPagesGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $direction direction (optional)
     * @param  string[] $direction2 direction2 (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]
     */
    public function apiWorkspacesWorkflowsGetSubresource($id, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        list($response) = $this->apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $direction, $direction2, $orderCreatedAt);
        return $response;
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $direction, $direction2, $orderCreatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsync($id, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        return $this->apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $direction, $direction2, $orderCreatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflow[]';
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $direction, $direction2, $orderCreatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $direction (optional)
     * @param  string[] $direction2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesWorkflowsGetSubresourceRequest($id, $direction = null, $direction2 = null, $orderCreatedAt = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if (is_array($direction2)) {
            $direction2 = ObjectSerializer::serializeCollection($direction2, 'multi', true);
        }
        if ($direction2 !== null) {
            $queryParams['direction[]'] = ObjectSerializer::toQueryValue($direction2);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkspaceItem
     *
     * Removes the Workspace resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWorkspaceItem($id)
    {
        $this->deleteWorkspaceItemWithHttpInfo($id);
    }

    /**
     * Operation deleteWorkspaceItemWithHttpInfo
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkspaceItemWithHttpInfo($id)
    {
        $request = $this->deleteWorkspaceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkspaceItemAsync
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceItemAsync($id)
    {
        return $this->deleteWorkspaceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkspaceItemAsyncWithHttpInfo
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteWorkspaceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkspaceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkspaceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceCollection
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]
     */
    public function getWorkspaceCollection($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getWorkspaceCollectionWithHttpInfo($orderCreatedAt, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getWorkspaceCollectionWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceCollectionWithHttpInfo($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getWorkspaceCollectionRequest($orderCreatedAt, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkspaceCollectionAsync
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollectionAsync($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        return $this->getWorkspaceCollectionAsyncWithHttpInfo($orderCreatedAt, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollectionAsyncWithHttpInfo($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
        $request = $this->getWorkspaceCollectionRequest($orderCreatedAt, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceCollection'
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkspaceCollectionRequest($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($itemsPerPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceItem
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort
     */
    public function getWorkspaceItem($id)
    {
        list($response) = $this->getWorkspaceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWorkspaceItemWithHttpInfo
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceItemWithHttpInfo($id)
    {
        $request = $this->getWorkspaceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkspaceItemAsync
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceItemAsync($id)
    {
        return $this->getWorkspaceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceItemAsyncWithHttpInfo
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
        $request = $this->getWorkspaceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkspaceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postWorkspaceCollection
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPageNoWs $workspace The new Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam
     */
    public function postWorkspaceCollection($workspace = null)
    {
        list($response) = $this->postWorkspaceCollectionWithHttpInfo($workspace);
        return $response;
    }

    /**
     * Operation postWorkspaceCollectionWithHttpInfo
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPageNoWs $workspace The new Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWorkspaceCollectionWithHttpInfo($workspace = null)
    {
        $request = $this->postWorkspaceCollectionRequest($workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postWorkspaceCollectionAsync
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPageNoWs $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkspaceCollectionAsync($workspace = null)
    {
        return $this->postWorkspaceCollectionAsyncWithHttpInfo($workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postWorkspaceCollectionAsyncWithHttpInfo
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPageNoWs $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkspaceCollectionAsyncWithHttpInfo($workspace = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam';
        $request = $this->postWorkspaceCollectionRequest($workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postWorkspaceCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPageNoWs $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postWorkspaceCollectionRequest($workspace = null)
    {

        $resourcePath = '/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putWorkspaceItem
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPageNoWs $workspace The updated Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort
     */
    public function putWorkspaceItem($id, $workspace = null)
    {
        list($response) = $this->putWorkspaceItemWithHttpInfo($id, $workspace);
        return $response;
    }

    /**
     * Operation putWorkspaceItemWithHttpInfo
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPageNoWs $workspace The updated Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWorkspaceItemWithHttpInfo($id, $workspace = null)
    {
        $request = $this->putWorkspaceItemRequest($id, $workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putWorkspaceItemAsync
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPageNoWs $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkspaceItemAsync($id, $workspace = null)
    {
        return $this->putWorkspaceItemAsyncWithHttpInfo($id, $workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putWorkspaceItemAsyncWithHttpInfo
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPageNoWs $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkspaceItemAsyncWithHttpInfo($id, $workspace = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
        $request = $this->putWorkspaceItemRequest($id, $workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putWorkspaceItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPageNoWs $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putWorkspaceItemRequest($id, $workspace = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
