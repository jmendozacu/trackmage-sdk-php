<?php
/**
 * WorkspaceApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: v0.1.41-7-gcca08cf
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * WorkspaceApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkspaceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresource
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id id (required)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]
     */
    public function apiTeamsWorkspacesGetSubresource($id, $orderCreatedAt = null)
    {
        list($response) = $this->apiTeamsWorkspacesGetSubresourceWithHttpInfo($id, $orderCreatedAt);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesGetSubresourceWithHttpInfo($id, $orderCreatedAt = null)
    {
        $request = $this->apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceAsync
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesGetSubresourceAsync($id, $orderCreatedAt = null)
    {
        return $this->apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo($id, $orderCreatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo($id, $orderCreatedAt = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
        $request = $this->apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrderStatusesGetSubresource
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $name name (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderName orderName (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]
     */
    public function apiTeamsWorkspacesOrderStatusesGetSubresource($id, $workspaces, $name = null, $orderId = null, $orderName = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrderStatusesGetSubresourceWithHttpInfo($id, $workspaces, $name, $orderId, $orderName);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrderStatusesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrderStatusesGetSubresourceWithHttpInfo($id, $workspaces, $name = null, $orderId = null, $orderName = null)
    {
        $request = $this->apiTeamsWorkspacesOrderStatusesGetSubresourceRequest($id, $workspaces, $name, $orderId, $orderName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrderStatusesGetSubresourceAsync
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrderStatusesGetSubresourceAsync($id, $workspaces, $name = null, $orderId = null, $orderName = null)
    {
        return $this->apiTeamsWorkspacesOrderStatusesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $name, $orderId, $orderName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrderStatusesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrderStatusesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $name = null, $orderId = null, $orderName = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]';
        $request = $this->apiTeamsWorkspacesOrderStatusesGetSubresourceRequest($id, $workspaces, $name, $orderId, $orderName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrderStatusesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrderStatusesGetSubresourceRequest($id, $workspaces, $name = null, $orderId = null, $orderName = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrderStatusesGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrderStatusesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/order_statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderName !== null) {
            $queryParams['order[name]'] = ObjectSerializer::toQueryValue($orderName);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]
     */
    public function apiTeamsWorkspacesOrdersGetSubresource($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsync($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        return $this->apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]';
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = ObjectSerializer::toQueryValue($orderOrderNumber);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = ObjectSerializer::toQueryValue($orderSubtotal);
        }
        // query params
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = ObjectSerializer::toQueryValue($orderTotal);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = ObjectSerializer::toQueryValue($orderNumber);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType);
        }
        // query params
        if (is_array($orderType2)) {
            $orderType2 = ObjectSerializer::serializeCollection($orderType2, 'multi', true);
        }
        if ($orderType2 !== null) {
            $queryParams['orderType[]'] = ObjectSerializer::toQueryValue($orderType2);
        }
        // query params
        if ($subtotal !== null) {
            $queryParams['subtotal'] = ObjectSerializer::toQueryValue($subtotal);
        }
        // query params
        if (is_array($subtotal2)) {
            $subtotal2 = ObjectSerializer::serializeCollection($subtotal2, 'multi', true);
        }
        if ($subtotal2 !== null) {
            $queryParams['subtotal[]'] = ObjectSerializer::toQueryValue($subtotal2);
        }
        // query params
        if ($total !== null) {
            $queryParams['total'] = ObjectSerializer::toQueryValue($total);
        }
        // query params
        if (is_array($total2)) {
            $total2 = ObjectSerializer::serializeCollection($total2, 'multi', true);
        }
        if ($total2 !== null) {
            $queryParams['total[]'] = ObjectSerializer::toQueryValue($total2);
        }
        // query params
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = ObjectSerializer::toQueryValue($subtotalBetween);
        }
        // query params
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = ObjectSerializer::toQueryValue($subtotalGt);
        }
        // query params
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = ObjectSerializer::toQueryValue($subtotalGte);
        }
        // query params
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = ObjectSerializer::toQueryValue($subtotalLt);
        }
        // query params
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = ObjectSerializer::toQueryValue($subtotalLte);
        }
        // query params
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = ObjectSerializer::toQueryValue($totalBetween);
        }
        // query params
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = ObjectSerializer::toQueryValue($totalGt);
        }
        // query params
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = ObjectSerializer::toQueryValue($totalGte);
        }
        // query params
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = ObjectSerializer::toQueryValue($totalLt);
        }
        // query params
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = ObjectSerializer::toQueryValue($totalLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresource
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]
     */
    public function apiTeamsWorkspacesShipmentsGetSubresource($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceAsync($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
        $request = $this->apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesShipmentsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesShipmentsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesShipmentsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = ObjectSerializer::toQueryValue($orderNumbers);
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'csv', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = ObjectSerializer::toQueryValue($orderNumbers2);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource($id, $workspaces)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id, $workspaces);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id, $workspaces)
    {
        $request = $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id, $workspaces);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsync($id, $workspaces)
    {
        return $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id, $workspaces)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id, $workspaces)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
        $request = $this->apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id, $workspaces);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id, $workspaces)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingPageLinkSettingsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_page_link_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresource
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresource($id, $workspaces)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $workspaces);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $workspaces)
    {
        $request = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceAsync($id, $workspaces)
    {
        return $this->apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $workspaces)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $workspaces)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
        $request = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingPagesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingPagesGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingPagesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresource($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        list($response) = $this->apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $type, $type2, $period, $period2, $orderCreatedAt);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type, $type2, $period, $period2, $orderCreatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsync($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        return $this->apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $type, $type2, $period, $period2, $orderCreatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]';
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type, $type2, $period, $period2, $orderCreatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if (is_array($type2)) {
            $type2 = ObjectSerializer::serializeCollection($type2, 'multi', true);
        }
        if ($type2 !== null) {
            $queryParams['type[]'] = ObjectSerializer::toQueryValue($type2);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = ObjectSerializer::toQueryValue($period);
        }
        // query params
        if (is_array($period2)) {
            $period2 = ObjectSerializer::serializeCollection($period2, 'multi', true);
        }
        if ($period2 !== null) {
            $queryParams['period[]'] = ObjectSerializer::toQueryValue($period2);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrderStatusesGetSubresource
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderName orderName (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]
     */
    public function apiWorkspacesOrderStatusesGetSubresource($id, $name = null, $orderId = null, $orderName = null)
    {
        list($response) = $this->apiWorkspacesOrderStatusesGetSubresourceWithHttpInfo($id, $name, $orderId, $orderName);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrderStatusesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrderStatusesGetSubresourceWithHttpInfo($id, $name = null, $orderId = null, $orderName = null)
    {
        $request = $this->apiWorkspacesOrderStatusesGetSubresourceRequest($id, $name, $orderId, $orderName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrderStatusesGetSubresourceAsync
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrderStatusesGetSubresourceAsync($id, $name = null, $orderId = null, $orderName = null)
    {
        return $this->apiWorkspacesOrderStatusesGetSubresourceAsyncWithHttpInfo($id, $name, $orderId, $orderName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrderStatusesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderStatus resources.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrderStatusesGetSubresourceAsyncWithHttpInfo($id, $name = null, $orderId = null, $orderName = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderStatusGetOrderStatus[]';
        $request = $this->apiWorkspacesOrderStatusesGetSubresourceRequest($id, $name, $orderId, $orderName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrderStatusesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $orderId (optional)
     * @param  string $orderName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrderStatusesGetSubresourceRequest($id, $name = null, $orderId = null, $orderName = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrderStatusesGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/order_statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderName !== null) {
            $queryParams['order[name]'] = ObjectSerializer::toQueryValue($orderName);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderExternalSyncId orderExternalSyncId (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]
     */
    public function apiWorkspacesOrdersGetSubresource($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        list($response) = $this->apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsync($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        return $this->apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetOrderGetOrderMetaGetOrderStatusForOrderGetAddress[]';
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderExternalSyncId, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $status, $status2, $orderType, $orderType2, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderExternalSyncId (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersGetSubresourceRequest($id, $orderId = null, $orderOrderNumber = null, $orderExternalSyncId = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $status = null, $status2 = null, $orderType = null, $orderType2 = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = ObjectSerializer::toQueryValue($orderOrderNumber);
        }
        // query params
        if ($orderExternalSyncId !== null) {
            $queryParams['order[externalSyncId]'] = ObjectSerializer::toQueryValue($orderExternalSyncId);
        }
        // query params
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = ObjectSerializer::toQueryValue($orderSubtotal);
        }
        // query params
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = ObjectSerializer::toQueryValue($orderTotal);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = ObjectSerializer::toQueryValue($orderNumber);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType);
        }
        // query params
        if (is_array($orderType2)) {
            $orderType2 = ObjectSerializer::serializeCollection($orderType2, 'multi', true);
        }
        if ($orderType2 !== null) {
            $queryParams['orderType[]'] = ObjectSerializer::toQueryValue($orderType2);
        }
        // query params
        if ($subtotal !== null) {
            $queryParams['subtotal'] = ObjectSerializer::toQueryValue($subtotal);
        }
        // query params
        if (is_array($subtotal2)) {
            $subtotal2 = ObjectSerializer::serializeCollection($subtotal2, 'multi', true);
        }
        if ($subtotal2 !== null) {
            $queryParams['subtotal[]'] = ObjectSerializer::toQueryValue($subtotal2);
        }
        // query params
        if ($total !== null) {
            $queryParams['total'] = ObjectSerializer::toQueryValue($total);
        }
        // query params
        if (is_array($total2)) {
            $total2 = ObjectSerializer::serializeCollection($total2, 'multi', true);
        }
        if ($total2 !== null) {
            $queryParams['total[]'] = ObjectSerializer::toQueryValue($total2);
        }
        // query params
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = ObjectSerializer::toQueryValue($subtotalBetween);
        }
        // query params
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = ObjectSerializer::toQueryValue($subtotalGt);
        }
        // query params
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = ObjectSerializer::toQueryValue($subtotalGte);
        }
        // query params
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = ObjectSerializer::toQueryValue($subtotalLt);
        }
        // query params
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = ObjectSerializer::toQueryValue($subtotalLte);
        }
        // query params
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = ObjectSerializer::toQueryValue($totalBetween);
        }
        // query params
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = ObjectSerializer::toQueryValue($totalGt);
        }
        // query params
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = ObjectSerializer::toQueryValue($totalGte);
        }
        // query params
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = ObjectSerializer::toQueryValue($totalLt);
        }
        // query params
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = ObjectSerializer::toQueryValue($totalLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresource
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderStatus orderStatus (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $externalSyncId externalSyncId (optional)
     * @param  string[] $externalSyncId2 externalSyncId2 (optional)
     * @param  string $externalSource externalSource (optional)
     * @param  string[] $externalSource2 externalSource2 (optional)
     * @param  int[] $id2 id2 (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]
     */
    public function apiWorkspacesShipmentsGetSubresource($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        list($response) = $this->apiWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);
        return $response;
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $request = $this->apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsGetSubresourceAsync($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        return $this->apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGetShipmentGetShipmentMetaGetAddress[]';
        $request = $this->apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderStatus, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderDaysInTransit, $orderReviewTotalScore, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $status, $status2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $externalSyncId, $externalSyncId2, $externalSource, $externalSource2, $id2, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesShipmentsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderStatus (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  int[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $externalSyncId (optional)
     * @param  string[] $externalSyncId2 (optional)
     * @param  string $externalSource (optional)
     * @param  string[] $externalSource2 (optional)
     * @param  int[] $id2 (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId = null, $orderTrackingNumber = null, $orderStatus = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $status = null, $status2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $externalSyncId = null, $externalSyncId2 = null, $externalSource = null, $externalSource2 = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesShipmentsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderId !== null) {
            $queryParams['order[id]'] = ObjectSerializer::toQueryValue($orderId);
        }
        // query params
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = ObjectSerializer::toQueryValue($orderTrackingNumber);
        }
        // query params
        if ($orderStatus !== null) {
            $queryParams['order[status]'] = ObjectSerializer::toQueryValue($orderStatus);
        }
        // query params
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = ObjectSerializer::toQueryValue($orderOriginCarrier);
        }
        // query params
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = ObjectSerializer::toQueryValue($orderDestinationCarrier);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($orderUpdatedAt);
        }
        // query params
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = ObjectSerializer::toQueryValue($orderShippedAt);
        }
        // query params
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = ObjectSerializer::toQueryValue($orderLastStatusUpdate);
        }
        // query params
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = ObjectSerializer::toQueryValue($orderExpectedDeliveryDate);
        }
        // query params
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = ObjectSerializer::toQueryValue($orderOriginCountry);
        }
        // query params
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = ObjectSerializer::toQueryValue($orderDestinationCountry);
        }
        // query params
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = ObjectSerializer::toQueryValue($orderOriginCountryIso2);
        }
        // query params
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = ObjectSerializer::toQueryValue($orderDestinationCountryIso2);
        }
        // query params
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = ObjectSerializer::toQueryValue($orderEmail);
        }
        // query params
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = ObjectSerializer::toQueryValue($orderDaysInTransit);
        }
        // query params
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = ObjectSerializer::toQueryValue($orderReviewTotalScore);
        }
        // query params
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = ObjectSerializer::toQueryValue($orderNumbers);
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'csv', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = ObjectSerializer::toQueryValue($orderNumbers2);
        }
        // query params
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($createdAtBefore);
        }
        // query params
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($createdAtStrictlyBefore);
        }
        // query params
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($createdAtAfter);
        }
        // query params
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($createdAtStrictlyAfter);
        }
        // query params
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updatedAtBefore);
        }
        // query params
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyBefore);
        }
        // query params
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updatedAtAfter);
        }
        // query params
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updatedAtStrictlyAfter);
        }
        // query params
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = ObjectSerializer::toQueryValue($shippedAtBefore);
        }
        // query params
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyBefore);
        }
        // query params
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = ObjectSerializer::toQueryValue($shippedAtAfter);
        }
        // query params
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = ObjectSerializer::toQueryValue($shippedAtStrictlyAfter);
        }
        // query params
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateBefore);
        }
        // query params
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyBefore);
        }
        // query params
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateAfter);
        }
        // query params
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = ObjectSerializer::toQueryValue($lastStatusUpdateStrictlyAfter);
        }
        // query params
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateBefore);
        }
        // query params
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyBefore);
        }
        // query params
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateAfter);
        }
        // query params
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = ObjectSerializer::toQueryValue($expectedDeliveryDateStrictlyAfter);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($trackingNumber);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($status2)) {
            $status2 = ObjectSerializer::serializeCollection($status2, 'multi', true);
        }
        if ($status2 !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status2);
        }
        // query params
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = ObjectSerializer::toQueryValue($originCarrier);
        }
        // query params
        if (is_array($originCarrier2)) {
            $originCarrier2 = ObjectSerializer::serializeCollection($originCarrier2, 'multi', true);
        }
        if ($originCarrier2 !== null) {
            $queryParams['originCarrier[]'] = ObjectSerializer::toQueryValue($originCarrier2);
        }
        // query params
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = ObjectSerializer::toQueryValue($destinationCarrier);
        }
        // query params
        if (is_array($destinationCarrier2)) {
            $destinationCarrier2 = ObjectSerializer::serializeCollection($destinationCarrier2, 'multi', true);
        }
        if ($destinationCarrier2 !== null) {
            $queryParams['destinationCarrier[]'] = ObjectSerializer::toQueryValue($destinationCarrier2);
        }
        // query params
        if ($originCountry !== null) {
            $queryParams['originCountry'] = ObjectSerializer::toQueryValue($originCountry);
        }
        // query params
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = ObjectSerializer::toQueryValue($originCountryIso2);
        }
        // query params
        if (is_array($originCountryIso3)) {
            $originCountryIso3 = ObjectSerializer::serializeCollection($originCountryIso3, 'multi', true);
        }
        if ($originCountryIso3 !== null) {
            $queryParams['originCountryIso2[]'] = ObjectSerializer::toQueryValue($originCountryIso3);
        }
        // query params
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = ObjectSerializer::toQueryValue($destinationCountry);
        }
        // query params
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = ObjectSerializer::toQueryValue($destinationCountryIso2);
        }
        // query params
        if (is_array($destinationCountryIso3)) {
            $destinationCountryIso3 = ObjectSerializer::serializeCollection($destinationCountryIso3, 'multi', true);
        }
        if ($destinationCountryIso3 !== null) {
            $queryParams['destinationCountryIso2[]'] = ObjectSerializer::toQueryValue($destinationCountryIso3);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($externalSyncId !== null) {
            $queryParams['externalSyncId'] = ObjectSerializer::toQueryValue($externalSyncId);
        }
        // query params
        if (is_array($externalSyncId2)) {
            $externalSyncId2 = ObjectSerializer::serializeCollection($externalSyncId2, 'multi', true);
        }
        if ($externalSyncId2 !== null) {
            $queryParams['externalSyncId[]'] = ObjectSerializer::toQueryValue($externalSyncId2);
        }
        // query params
        if ($externalSource !== null) {
            $queryParams['externalSource'] = ObjectSerializer::toQueryValue($externalSource);
        }
        // query params
        if (is_array($externalSource2)) {
            $externalSource2 = ObjectSerializer::serializeCollection($externalSource2, 'multi', true);
        }
        if ($externalSource2 !== null) {
            $queryParams['externalSource[]'] = ObjectSerializer::toQueryValue($externalSource2);
        }
        // query params
        if (is_array($id2)) {
            $id2 = ObjectSerializer::serializeCollection($id2, 'multi', true);
        }
        if ($id2 !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id2);
        }
        // query params
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = ObjectSerializer::toQueryValue($daysInTransit);
        }
        // query params
        if (is_array($daysInTransit2)) {
            $daysInTransit2 = ObjectSerializer::serializeCollection($daysInTransit2, 'multi', true);
        }
        if ($daysInTransit2 !== null) {
            $queryParams['daysInTransit[]'] = ObjectSerializer::toQueryValue($daysInTransit2);
        }
        // query params
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = ObjectSerializer::toQueryValue($daysInTransitBetween);
        }
        // query params
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = ObjectSerializer::toQueryValue($daysInTransitGt);
        }
        // query params
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = ObjectSerializer::toQueryValue($daysInTransitGte);
        }
        // query params
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = ObjectSerializer::toQueryValue($daysInTransitLt);
        }
        // query params
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = ObjectSerializer::toQueryValue($daysInTransitLte);
        }
        // query params
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = ObjectSerializer::toQueryValue($reviewTotalScoreBetween);
        }
        // query params
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGt);
        }
        // query params
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreGte);
        }
        // query params
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLt);
        }
        // query params
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = ObjectSerializer::toQueryValue($reviewTotalScoreLte);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresource
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresource($id)
    {
        list($response) = $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresourceWithHttpInfo($id)
    {
        $request = $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsync($id)
    {
        return $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPageLinkSettings resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPageLinkSettingsGetSubresourceAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageLinkSettingsGetTrackingPageLinkSettings[]';
        $request = $this->apiWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingPageLinkSettingsGetSubresource'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingPageLinkSettingsGetSubresourceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingPageLinkSettingsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_page_link_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresource
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]
     */
    public function apiWorkspacesTrackingPagesGetSubresource($id)
    {
        list($response) = $this->apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id)
    {
        $request = $this->apiWorkspacesTrackingPagesGetSubresourceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPagesGetSubresourceAsync($id)
    {
        return $this->apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGetTrackingPageGetBuilder[]';
        $request = $this->apiWorkspacesTrackingPagesGetSubresourceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingPagesGetSubresource'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingPagesGetSubresourceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingPagesGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]
     */
    public function apiWorkspacesWorkflowsGetSubresource($id, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        list($response) = $this->apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $type, $type2, $period, $period2, $orderCreatedAt);
        return $response;
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $type, $type2, $period, $period2, $orderCreatedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsync($id, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        return $this->apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $type, $type2, $period, $period2, $orderCreatedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetWorkflowGetWorkflowMeta[]';
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $type, $type2, $period, $period2, $orderCreatedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $orderCreatedAt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesWorkflowsGetSubresourceRequest($id, $type = null, $type2 = null, $period = null, $period2 = null, $orderCreatedAt = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if (is_array($type2)) {
            $type2 = ObjectSerializer::serializeCollection($type2, 'multi', true);
        }
        if ($type2 !== null) {
            $queryParams['type[]'] = ObjectSerializer::toQueryValue($type2);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = ObjectSerializer::toQueryValue($period);
        }
        // query params
        if (is_array($period2)) {
            $period2 = ObjectSerializer::serializeCollection($period2, 'multi', true);
        }
        if ($period2 !== null) {
            $queryParams['period[]'] = ObjectSerializer::toQueryValue($period2);
        }
        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkspaceItem
     *
     * Removes the Workspace resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWorkspaceItem($id)
    {
        $this->deleteWorkspaceItemWithHttpInfo($id);
    }

    /**
     * Operation deleteWorkspaceItemWithHttpInfo
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkspaceItemWithHttpInfo($id)
    {
        $request = $this->deleteWorkspaceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkspaceItemAsync
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceItemAsync($id)
    {
        return $this->deleteWorkspaceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkspaceItemAsyncWithHttpInfo
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteWorkspaceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkspaceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkspaceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceCollection
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]
     */
    public function getWorkspaceCollection($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getWorkspaceCollectionWithHttpInfo($orderCreatedAt, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getWorkspaceCollectionWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceCollectionWithHttpInfo($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getWorkspaceCollectionRequest($orderCreatedAt, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkspaceCollectionAsync
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollectionAsync($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        return $this->getWorkspaceCollectionAsyncWithHttpInfo($orderCreatedAt, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollectionAsyncWithHttpInfo($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort[]';
        $request = $this->getWorkspaceCollectionRequest($orderCreatedAt, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceCollection'
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkspaceCollectionRequest($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($orderCreatedAt);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($itemsPerPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceItem
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort
     */
    public function getWorkspaceItem($id)
    {
        list($response) = $this->getWorkspaceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWorkspaceItemWithHttpInfo
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceItemWithHttpInfo($id)
    {
        $request = $this->getWorkspaceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkspaceItemAsync
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceItemAsync($id)
    {
        return $this->getWorkspaceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceItemAsyncWithHttpInfo
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
        $request = $this->getWorkspaceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkspaceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postWorkspaceCollection
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPage $workspace The new Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam
     */
    public function postWorkspaceCollection($workspace = null)
    {
        list($response) = $this->postWorkspaceCollectionWithHttpInfo($workspace);
        return $response;
    }

    /**
     * Operation postWorkspaceCollectionWithHttpInfo
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPage $workspace The new Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWorkspaceCollectionWithHttpInfo($workspace = null)
    {
        $request = $this->postWorkspaceCollectionRequest($workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postWorkspaceCollectionAsync
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPage $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkspaceCollectionAsync($workspace = null)
    {
        return $this->postWorkspaceCollectionAsyncWithHttpInfo($workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postWorkspaceCollectionAsyncWithHttpInfo
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPage $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkspaceCollectionAsyncWithHttpInfo($workspace = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShortGetTeam';
        $request = $this->postWorkspaceCollectionRequest($workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postWorkspaceCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePostWorkspaceSetTeamSetTrackingPage $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postWorkspaceCollectionRequest($workspace = null)
    {

        $resourcePath = '/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putWorkspaceItem
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPage $workspace The updated Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort
     */
    public function putWorkspaceItem($id, $workspace = null)
    {
        list($response) = $this->putWorkspaceItemWithHttpInfo($id, $workspace);
        return $response;
    }

    /**
     * Operation putWorkspaceItemWithHttpInfo
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPage $workspace The updated Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWorkspaceItemWithHttpInfo($id, $workspace = null)
    {
        $request = $this->putWorkspaceItemRequest($id, $workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putWorkspaceItemAsync
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPage $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkspaceItemAsync($id, $workspace = null)
    {
        return $this->putWorkspaceItemAsyncWithHttpInfo($id, $workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putWorkspaceItemAsyncWithHttpInfo
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPage $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkspaceItemAsyncWithHttpInfo($id, $workspace = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetWorkspaceGetMediaShort';
        $request = $this->putWorkspaceItemRequest($id, $workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putWorkspaceItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePutWorkspaceSetTrackingPage $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putWorkspaceItemRequest($id, $workspace = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
