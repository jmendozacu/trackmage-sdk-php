<?php
/**
 * TrackingNumberGetTrackingNumbers
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrackMage API
 *
 * TrackMage API
 *
 * OpenAPI spec version: v0.1.40-5-g0495724
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * TrackingNumberGetTrackingNumbers Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingNumberGetTrackingNumbers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrackingNumber-getTrackingNumbers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'workspace' => 'string',
        'review' => 'string',
        'reviewTotalScore' => 'float',
        'id' => 'int',
        'trackingNumber' => 'string',
        'status' => 'string',
        'orderId' => 'string',
        'email' => 'string',
        'carrier' => 'string',
        'daysInTransit' => 'int',
        'sentFrom' => 'string',
        'sentTo' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'checkpoints' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'workspace' => null,
        'review' => null,
        'reviewTotalScore' => null,
        'id' => null,
        'trackingNumber' => null,
        'status' => null,
        'orderId' => null,
        'email' => null,
        'carrier' => null,
        'daysInTransit' => null,
        'sentFrom' => null,
        'sentTo' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'checkpoints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'workspace' => 'workspace',
        'review' => 'review',
        'reviewTotalScore' => 'reviewTotalScore',
        'id' => 'id',
        'trackingNumber' => 'trackingNumber',
        'status' => 'status',
        'orderId' => 'orderId',
        'email' => 'email',
        'carrier' => 'carrier',
        'daysInTransit' => 'daysInTransit',
        'sentFrom' => 'sentFrom',
        'sentTo' => 'sentTo',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'checkpoints' => 'checkpoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'workspace' => 'setWorkspace',
        'review' => 'setReview',
        'reviewTotalScore' => 'setReviewTotalScore',
        'id' => 'setId',
        'trackingNumber' => 'setTrackingNumber',
        'status' => 'setStatus',
        'orderId' => 'setOrderId',
        'email' => 'setEmail',
        'carrier' => 'setCarrier',
        'daysInTransit' => 'setDaysInTransit',
        'sentFrom' => 'setSentFrom',
        'sentTo' => 'setSentTo',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'checkpoints' => 'setCheckpoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'workspace' => 'getWorkspace',
        'review' => 'getReview',
        'reviewTotalScore' => 'getReviewTotalScore',
        'id' => 'getId',
        'trackingNumber' => 'getTrackingNumber',
        'status' => 'getStatus',
        'orderId' => 'getOrderId',
        'email' => 'getEmail',
        'carrier' => 'getCarrier',
        'daysInTransit' => 'getDaysInTransit',
        'sentFrom' => 'getSentFrom',
        'sentTo' => 'getSentTo',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'checkpoints' => 'getCheckpoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['workspace'] = isset($data['workspace']) ? $data['workspace'] : null;
        $this->container['review'] = isset($data['review']) ? $data['review'] : null;
        $this->container['reviewTotalScore'] = isset($data['reviewTotalScore']) ? $data['reviewTotalScore'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['daysInTransit'] = isset($data['daysInTransit']) ? $data['daysInTransit'] : null;
        $this->container['sentFrom'] = isset($data['sentFrom']) ? $data['sentFrom'] : null;
        $this->container['sentTo'] = isset($data['sentTo']) ? $data['sentTo'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['checkpoints'] = isset($data['checkpoints']) ? $data['checkpoints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['workspace'] === null) {
            $invalidProperties[] = "'workspace' can't be null";
        }
        if ($this->container['trackingNumber'] === null) {
            $invalidProperties[] = "'trackingNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets workspace
     *
     * @return string
     */
    public function getWorkspace()
    {
        return $this->container['workspace'];
    }

    /**
     * Sets workspace
     *
     * @param string $workspace workspace
     *
     * @return $this
     */
    public function setWorkspace($workspace)
    {
        $this->container['workspace'] = $workspace;

        return $this;
    }

    /**
     * Gets review
     *
     * @return string|null
     */
    public function getReview()
    {
        return $this->container['review'];
    }

    /**
     * Sets review
     *
     * @param string|null $review review
     *
     * @return $this
     */
    public function setReview($review)
    {
        $this->container['review'] = $review;

        return $this;
    }

    /**
     * Gets reviewTotalScore
     *
     * @return float|null
     */
    public function getReviewTotalScore()
    {
        return $this->container['reviewTotalScore'];
    }

    /**
     * Sets reviewTotalScore
     *
     * @param float|null $reviewTotalScore reviewTotalScore
     *
     * @return $this
     */
    public function setReviewTotalScore($reviewTotalScore)
    {
        $this->container['reviewTotalScore'] = $reviewTotalScore;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber trackingNumber
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId orderId
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets daysInTransit
     *
     * @return int|null
     */
    public function getDaysInTransit()
    {
        return $this->container['daysInTransit'];
    }

    /**
     * Sets daysInTransit
     *
     * @param int|null $daysInTransit daysInTransit
     *
     * @return $this
     */
    public function setDaysInTransit($daysInTransit)
    {
        $this->container['daysInTransit'] = $daysInTransit;

        return $this;
    }

    /**
     * Gets sentFrom
     *
     * @return string|null
     */
    public function getSentFrom()
    {
        return $this->container['sentFrom'];
    }

    /**
     * Sets sentFrom
     *
     * @param string|null $sentFrom sentFrom
     *
     * @return $this
     */
    public function setSentFrom($sentFrom)
    {
        $this->container['sentFrom'] = $sentFrom;

        return $this;
    }

    /**
     * Gets sentTo
     *
     * @return string|null
     */
    public function getSentTo()
    {
        return $this->container['sentTo'];
    }

    /**
     * Sets sentTo
     *
     * @param string|null $sentTo sentTo
     *
     * @return $this
     */
    public function setSentTo($sentTo)
    {
        $this->container['sentTo'] = $sentTo;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets checkpoints
     *
     * @return string[]|null
     */
    public function getCheckpoints()
    {
        return $this->container['checkpoints'];
    }

    /**
     * Sets checkpoints
     *
     * @param string[]|null $checkpoints checkpoints
     *
     * @return $this
     */
    public function setCheckpoints($checkpoints)
    {
        $this->container['checkpoints'] = $checkpoints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


